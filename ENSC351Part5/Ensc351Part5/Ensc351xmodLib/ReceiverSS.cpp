////////////////////////////////////////////////
// Generated by SmartState C++ Code Generator //
//                 DO NOT EDIT				  //
////////////////////////////////////////////////

#pragma warning(disable: 4786)
#pragma warning(disable: 4290)

//Additional Includes


#include "ReceiverSS.h"
#include "ReceiverX.h"

/*Messages
Define user specific messages in a file and
include that file in the additional includes section in 
the model.
-- FOLLOWING MESSAGES ARE USED --
SER
TM
KB_C
CONT
*/

//Additional Declarations
#define c wParam


namespace Receiver_SS
{
using namespace std;
using namespace smartstate;

//State Mgr
//--------------------------------------------------------------------
ReceiverSS::ReceiverSS(ReceiverX* ctx, bool startMachine/*=true*/)
 : StateMgr("ReceiverSS"),
   myCtx(ctx)
{
	myConcStateList.push_back(new CompleteReceiverTopLevel_ReceiverSS("CompleteReceiverTopLevel_ReceiverSS", 0, this));

	if(startMachine)
		start();
}

ReceiverX& ReceiverSS::getCtx() const
{
	return *myCtx;
}

//Base State
//--------------------------------------------------------------------
ReceiverBaseState::ReceiverBaseState(const string& name, BaseState* parent, ReceiverSS* mgr)
 : BaseState(name, parent, mgr)
{
}

//--------------------------------------------------------------------
CompleteReceiverTopLevel_ReceiverSS::CompleteReceiverTopLevel_ReceiverSS(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
	mySubStates.push_back(new KBcancelable_CompleteReceiverTopLevel("KBcancelable_CompleteReceiverTopLevel", this, mgr));
	mySubStates.push_back(new TimeoutTransient_CompleteReceiverTopLevel("TimeoutTransient_CompleteReceiverTopLevel", this, mgr));
	mySubStates.push_back(new WorkaroundTransient2_CompleteReceiverTopLevel("WorkaroundTransient2_CompleteReceiverTopLevel", this, mgr));
	setType(eSuper);
}

void CompleteReceiverTopLevel_ReceiverSS::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> CompleteReceiverTopLevel_ReceiverSS <onEntry>");

	ReceiverX& ctx = getMgr()->getCtx();

	// Code from Model here
	if (ctx.Crcflg) {ctx.NCGbyte='C'; ctx.tmSoh = TM_SOH_C;}
	else {ctx.NCGbyte=NAK; ctx.tmSoh = TM_SOH;}
	/*ctx.purge();*/ctx.sendByte(ctx.NCGbyte); ctx.errCnt=0; ctx.KbCan=false;
}

void CompleteReceiverTopLevel_ReceiverSS::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< CompleteReceiverTopLevel_ReceiverSS <onExit>");

}

void CompleteReceiverTopLevel_ReceiverSS::onMessage(const Mesg& mesg)
{
	super::onMessage(mesg);
}

//--------------------------------------------------------------------
KBcancelable_CompleteReceiverTopLevel::KBcancelable_CompleteReceiverTopLevel(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
	mySubStates.push_back(new BETWEEN_KBcancelable("BETWEEN_KBcancelable", this, mgr));
	setType(eSuper);
}

void KBcancelable_CompleteReceiverTopLevel::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> KBcancelable_CompleteReceiverTopLevel <onEntry>");

	ReceiverX& ctx = getMgr()->getCtx();

	// Code from Model here
	ctx.tm(ctx.tmSoh);
}

void KBcancelable_CompleteReceiverTopLevel::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< KBcancelable_CompleteReceiverTopLevel <onExit>");

}

void KBcancelable_CompleteReceiverTopLevel::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else if(mesg.message == TM)
		onTMMessage(mesg);
	else 
		super::onMessage(mesg);
}

void KBcancelable_CompleteReceiverTopLevel::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel SER <message trapped>");

	if(!ctx.KbCan && c==SOH)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("KBcancelable_CompleteReceiverTopLevel", "TimeoutTransient_CompleteReceiverTopLevel");
		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel SER <executing effect>");


		//User specified effect begin
		ctx.getRestBlk();
		if (!ctx.goodBlk1st) 
		     ctx.errCnt++;
		else ctx.errCnt=0;
		
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel SER <executing entry>");

		getMgr()->executeEntry(root, "TimeoutTransient_CompleteReceiverTopLevel");
		return;
	}
	else
	if(ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("KBcancelable_CompleteReceiverTopLevel", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel SER <executing effect>");


		//User specified effect begin
		ctx.purge();
		ctx.can8();
		ctx.result=
		    "KbCancelled (delayed)";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void KBcancelable_CompleteReceiverTopLevel::onTMMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel TM <message trapped>");

	if(ctx.errCnt < errB && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel TM <executing exit>");

		const BaseState* root = getMgr()->executeExit("KBcancelable_CompleteReceiverTopLevel", "WorkaroundTransient2_CompleteReceiverTopLevel");
		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel TM <executing effect>");


		//User specified effect begin
		if (ctx.NCGbyte=='C' && ctx.errCnt == 3) {
		   ctx.NCGbyte=NAK; 
		   ctx.tmSoh=TM_SOH;
		   ctx.Crcflg=false;}
		ctx.sendByte(ctx.NCGbyte);
		ctx.errCnt++;
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel TM <executing entry>");

		getMgr()->executeEntry(root, "WorkaroundTransient2_CompleteReceiverTopLevel");
		return;
	}
	else
	if(ctx.errCnt>=errB || ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel TM <executing exit>");

		const BaseState* root = getMgr()->executeExit("KBcancelable_CompleteReceiverTopLevel", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel TM <executing effect>");


		//User specified effect begin
		ctx.can8();
		if (ctx.KbCan)
		     ctx.result="KbCancelled";
		else
		     ctx.result="ExcessiveErrors";
		
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("KBcancelable_CompleteReceiverTopLevel TM <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
BETWEEN_KBcancelable::BETWEEN_KBcancelable(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
	mySubStates.push_back(new SERcancelable_BETWEEN("SERcancelable_BETWEEN", this, mgr));
	mySubStates.push_back(new CAN_BETWEEN("CAN_BETWEEN", this, mgr));
	setType(eSuper);
}

void BETWEEN_KBcancelable::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> BETWEEN_KBcancelable <onEntry>");

}

void BETWEEN_KBcancelable::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< BETWEEN_KBcancelable <onExit>");

}

void BETWEEN_KBcancelable::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else 
		super::onMessage(mesg);
}

void BETWEEN_KBcancelable::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("BETWEEN_KBcancelable SER <message trapped>");

	if(!ctx.KbCan  && c!=SOH)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("BETWEEN_KBcancelable SER <executing effect>");


		//User specified effect begin
		ctx.purge();
		//User specified effect end

		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
SERcancelable_BETWEEN::SERcancelable_BETWEEN(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
	mySubStates.push_back(new FirstByte_SERcancelable("FirstByte_SERcancelable", this, mgr));
	mySubStates.push_back(new EOT_SERcancelable("EOT_SERcancelable", this, mgr));
	setType(eSuper);
}

void SERcancelable_BETWEEN::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> SERcancelable_BETWEEN <onEntry>");

}

void SERcancelable_BETWEEN::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< SERcancelable_BETWEEN <onExit>");

}

void SERcancelable_BETWEEN::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else 
		super::onMessage(mesg);
}

void SERcancelable_BETWEEN::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_BETWEEN SER <message trapped>");

	if(c==CAN)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_BETWEEN SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("SERcancelable_BETWEEN", "CAN_BETWEEN");
		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_BETWEEN SER <executing effect>");


		//User specified effect begin
		//nil
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_BETWEEN SER <executing entry>");

		getMgr()->executeEntry(root, "CAN_BETWEEN");
		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
EOT_SERcancelable::EOT_SERcancelable(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
}

void EOT_SERcancelable::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> EOT_SERcancelable <onEntry>");

}

void EOT_SERcancelable::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< EOT_SERcancelable <onExit>");

}

void EOT_SERcancelable::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else if(mesg.message == KB_C)
		onKB_CMessage(mesg);
	else 
		super::onMessage(mesg);
}

void EOT_SERcancelable::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable SER <message trapped>");

	if(c!=EOT && ctx.errCnt>=errB)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("EOT_SERcancelable", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.purge(); ctx.can8();
		ctx.result="Error from EOT";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}
	else
	if(c==EOT)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("EOT_SERcancelable", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.sendByte(ACK);
		ctx.result="Done";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void EOT_SERcancelable::onKB_CMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable KB_C <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT_SERcancelable KB_C <executing effect>");


		//User specified effect begin
		ctx.KbCan=true;
		//User specified effect end

		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
FirstByte_SERcancelable::FirstByte_SERcancelable(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
}

void FirstByte_SERcancelable::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> FirstByte_SERcancelable <onEntry>");

}

void FirstByte_SERcancelable::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< FirstByte_SERcancelable <onExit>");

}

void FirstByte_SERcancelable::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else if(mesg.message == KB_C)
		onKB_CMessage(mesg);
	else 
		super::onMessage(mesg);
}

void FirstByte_SERcancelable::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("FirstByte_SERcancelable SER <message trapped>");

	if(!ctx.KbCan && c==EOT)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("FirstByte_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("FirstByte_SERcancelable", "EOT_SERcancelable");
		/* -g option specified while compilation. */
		myMgr->debugLog("FirstByte_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.purge();ctx.sendByte(NAK);
		ctx.errCnt++;ctx.tm(TM_SOH);
		ctx.NCGbyte=NAK;
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("FirstByte_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "EOT_SERcancelable");
		return;
	}

	super::onMessage(mesg);
}

void FirstByte_SERcancelable::onKB_CMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("FirstByte_SERcancelable KB_C <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("FirstByte_SERcancelable KB_C <executing effect>");


		//User specified effect begin
		ctx.KbCan=true;
		//User specified effect end

		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
CAN_BETWEEN::CAN_BETWEEN(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
}

void CAN_BETWEEN::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> CAN_BETWEEN <onEntry>");

	ReceiverX& ctx = getMgr()->getCtx();

	// Code from Model here
	ctx.tmPush(TM_2CHAR);
}

void CAN_BETWEEN::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< CAN_BETWEEN <onExit>");

	ReceiverX& ctx = getMgr()->getCtx();

	// Code from Model here
	ctx.tmPop();
}

void CAN_BETWEEN::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else if(mesg.message == TM)
		onTMMessage(mesg);
	else if(mesg.message == KB_C)
		onKB_CMessage(mesg);
	else 
		super::onMessage(mesg);
}

void CAN_BETWEEN::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN SER <message trapped>");

	if(c==CAN)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("CAN_BETWEEN", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN SER <executing effect>");


		//User specified effect begin
		ctx.clearCan();
		ctx.result="SndCancelled";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void CAN_BETWEEN::onTMMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN TM <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN TM <executing exit>");

		const BaseState* root = getMgr()->executeExit("CAN_BETWEEN", "SERcancelable_BETWEEN");
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN TM <executing effect>");


		//User specified effect begin
		//nil
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN TM <executing entry>");

		getMgr()->executeEntry(root, "SERcancelable_BETWEEN");
		return;
	}

	super::onMessage(mesg);
}

void CAN_BETWEEN::onKB_CMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN KB_C <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_BETWEEN KB_C <executing effect>");


		//User specified effect begin
		ctx.KbCan=true;
		//User specified effect end

		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
TimeoutTransient_CompleteReceiverTopLevel::TimeoutTransient_CompleteReceiverTopLevel(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
}

void TimeoutTransient_CompleteReceiverTopLevel::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> TimeoutTransient_CompleteReceiverTopLevel <onEntry>");

	ReceiverX& ctx = getMgr()->getCtx();

	// Code from Model here
	ctx.tm(0);
}

void TimeoutTransient_CompleteReceiverTopLevel::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< TimeoutTransient_CompleteReceiverTopLevel <onExit>");

}

void TimeoutTransient_CompleteReceiverTopLevel::onMessage(const Mesg& mesg)
{
	if(mesg.message == TM)
		onTMMessage(mesg);
	else if(mesg.message == KB_C)
		onKB_CMessage(mesg);
	else if(mesg.message == SER)
		onSERMessage(mesg);
	else 
		super::onMessage(mesg);
}

void TimeoutTransient_CompleteReceiverTopLevel::onTMMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel TM <message trapped>");

	if(!ctx.syncLoss && (ctx.errCnt <= errB))
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel TM <executing exit>");

		const BaseState* root = getMgr()->executeExit("TimeoutTransient_CompleteReceiverTopLevel", "KBcancelable_CompleteReceiverTopLevel");
		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel TM <executing effect>");


		//User specified effect begin
		if (ctx.goodBlk)  ctx.sendByte(ACK);
		else  ctx.sendByte(NAK);
		ctx.NCGbyte=NAK; ctx.tmSoh=TM_SOH;
		if (ctx.goodBlk1st) 
		      ctx.writeChunk();
		
		
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel TM <executing entry>");

		getMgr()->executeEntry(root, "KBcancelable_CompleteReceiverTopLevel");
		return;
	}
	else
	if(ctx.syncLoss || ctx.errCnt > errB)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel TM <executing exit>");

		const BaseState* root = getMgr()->executeExit("TimeoutTransient_CompleteReceiverTopLevel", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel TM <executing effect>");


		//User specified effect begin
		ctx.can8();
		if (ctx.syncLoss)
		     ctx.result="LossOfSyncronization";
		else
		     ctx.result="ExcessiveErrors";
		
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel TM <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void TimeoutTransient_CompleteReceiverTopLevel::onKB_CMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel KB_C <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel KB_C <executing exit>");

		const BaseState* root = getMgr()->executeExit("TimeoutTransient_CompleteReceiverTopLevel", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel KB_C <executing effect>");


		//User specified effect begin
		ctx.can8();
		ctx.result="kbCancelled (immediate)";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel KB_C <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void TimeoutTransient_CompleteReceiverTopLevel::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel SER <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("TimeoutTransient_CompleteReceiverTopLevel SER <executing effect>");


		//User specified effect begin
		ctx.purge();
		//User specified effect end

		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
WorkaroundTransient2_CompleteReceiverTopLevel::WorkaroundTransient2_CompleteReceiverTopLevel(const string& name, BaseState* parent, ReceiverSS* mgr)
 : ReceiverBaseState(name, parent, mgr)
{
	myHistory = false;
}

void WorkaroundTransient2_CompleteReceiverTopLevel::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> WorkaroundTransient2_CompleteReceiverTopLevel <onEntry>");

	ReceiverX& ctx = getMgr()->getCtx();

	// Code from Model here
	POST("*", CONT);
}

void WorkaroundTransient2_CompleteReceiverTopLevel::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< WorkaroundTransient2_CompleteReceiverTopLevel <onExit>");

}

void WorkaroundTransient2_CompleteReceiverTopLevel::onMessage(const Mesg& mesg)
{
	if(mesg.message == CONT)
		onCONTMessage(mesg);
	else 
		super::onMessage(mesg);
}

void WorkaroundTransient2_CompleteReceiverTopLevel::onCONTMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	ReceiverX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("WorkaroundTransient2_CompleteReceiverTopLevel CONT <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("WorkaroundTransient2_CompleteReceiverTopLevel CONT <executing exit>");

		const BaseState* root = getMgr()->executeExit("WorkaroundTransient2_CompleteReceiverTopLevel", "KBcancelable_CompleteReceiverTopLevel");
		/* -g option specified while compilation. */
		myMgr->debugLog("WorkaroundTransient2_CompleteReceiverTopLevel CONT <executing effect>");


		//User specified effect begin
		//nil
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("WorkaroundTransient2_CompleteReceiverTopLevel CONT <executing entry>");

		getMgr()->executeEntry(root, "KBcancelable_CompleteReceiverTopLevel");
		return;
	}

	super::onMessage(mesg);
}


} /*end namespace*/

//___________________________________vv^^vv___________________________________
